Постановка завдання:
 Написати бібліотеку, що дає змогу працювати з масивами, одно- і двозв'язними списками,
стеками, чергами, передбачити створення, додавання/вилучення елемента в кінець, на початок,
на конкретну позицію, дописування одного до іншого, обертання порядку елементів, сортування,
пошук. Для деяких типів, наприклад, стека, не всі ці операції можливі, тому необхідно обдумати,
що має зміст реалізовувати, а що - ні.
Шляхи реалізації:

Коротко про типи даних , їх переваги та недоліки:

 - Масив — сукупність елементів одного типу даних, впорядкованих за індексами, 
що визначають положення елемента в масиві.

(+) Можливість компактного збереження послідовності їх елементів в локальній області пам'яті 
(що не завжди вдається, наприклад, для зв'язаних списків), що дозволяє ефективно виконувати 
операції з послідовного обходу елементів;
(+) Масиви набагато кращі в операціях, які потребують безпосереднього доступу до кожного елементу.

(-) Масив має статичний розмір, і, якщо, вільного місця там немає, доведеться створювати масив 
більшого розміру, копіювати у нього елементи «старого» масиву і тільки після цього додавати новий елемент;
(-) Можна лише зсунути елементи і розглядати його, як масив меншого розміру. Пам'ять при цьому не звільняється.

У випадках, коли розмір масиву є досить великий та використання звичайного звертання за індексом стає проблематичним, 
або великий відсоток його комірок не використовується, слід звертатись до асоціативних масивів, де проблема індексування 
великих обсягів інформації вирішується більш оптимально.

Асоціативний масив - абстрактний тип даних (інтерфейс до сховища даних), що дозволяє зберігати дані у вигляді набору
пар ключ — значення та доступом до значень за їх ключем.
Реалізації асоціативних масивів зазвичай підтримують операції додавання пари, а також пошуку та видалення пари за ключем:

  - вставити (ключ, значення)
  - шукати (ключ)
  - вилучити (ключ)


 - Лінійний список – це динамічна структура даних, кожний елемент якої за допомогою вказівника
зв’язується з наступним елементом (в однозв'язаних або однобічно зв'язаних списках) або на наступний
та попередній елементи (в двозв'язаних або двобічно зв'язаних списках). Список має «голову» — перший 
елемент та «хвіст» — останній елемент.

Зв'язані списки мають серію переваг порівняно з масивами. 
(+) Зокрема, в них набагато ефективніше (за час О(1), тобто незалежно від кількості елементів) 
виконуються процедури додавання та вилучення елементів;
(+) Можливість додавати вузол у кінець списку;
(+) Можливість видаляти вузол і звільнювати пам'ять, яку він займав;
(+)Можливість вставляти вузол у середину списку. 

(-) В певних випадках другий вказівник двозв'язаного списку може задавати порядок проходження елементів, 
який не є зворотним по відношенню до першого вказівника;
(-) Відсутність поіндексного доступу до елементів списку;
(-) Зайвий час на прохід по списку для пошуку/видалення/додавання елементу у кінець;
(-) Використання більшого об'єму пам'яті за рахунок вказівників на наступний вузол.

 - Стек — різновид лінійного списку, структура даних, яка працює за принципом «останній прийшов — перший пішов».

(+/-) Всі операції (наприклад, видалення елементу) в стеку можна проводити тільки з одним елементом, який знаходиться 
на верхівці стеку та був введений в стек останнім.

  - Черга — динамічна структура даних, що працює за принципом "перший прийшов - перший пішов".
У черги є голова та хвіст (або ж початок та кінець).

(+/-) Елемент, що додається до черги, опиняється в її хвості. 
(+/-) Елемент, що видаляється з черги, знаходиться в її голові.





